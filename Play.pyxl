Play
════════════════════════════════════════════════════════════════════════

let LEFT_SCREEN_START_X = 0
let LEFT_SCREEN_END_X = 190

let RIGHT_SCREEN_START_X = 194
let RIGHT_SCREEN_END_X = 384

let PLATFORM_COLUMN_COUNT = 5
let PLATFORM_COLUMN_X = 38

play_sound(main_theme, true, 200)

let mainPhysics = make_physics()

createPlatformRow(true)

let platformTimer = 0.0
let powerupTimer = 0.0
let dt = 1/60

let players =[]
push(players, make_player(gamepad_array[0], xy(SCREEN_SIZE.x/4, -20), player1_sprite, xy(0, SCREEN_SIZE.x/2 - 2)))
push(players, make_player(gamepad_array[1], xy(SCREEN_SIZE.x*3/4, -20), player1_sprite, xy(SCREEN_SIZE.x/2 + 2, SCREEN_SIZE.x)))

for player in players:
   physics_add_entity(mainPhysics, player)


frame
────────────────────────────────────────────────────────────────────────


// Update
platformTimer += dt
if platformTimer >= 1.0:
   createPlatformRow(false)
   platformTimer = 0.0

//powerupTimer += dt
//if powerupTimer >= 5.0:
//   createPowerUp()
//   powerupTimer = 0.0

for player in players:
   update_player(player, entity_array)

platformUpdate(players, dt)

// Physics
physics_simulate(mainPhysics)

// Draws
set_background(rgb(20%, 60%, 90%))

//updatePowerUp(players, entity_array, dt)

platformDraw()

//powerUpDraw()

for player in players:
   draw_player(player)

draw_corner_rect(xy(SCREEN_SIZE.x/2 - 2, 0), xy(4, SCREEN_SIZE.y), #DDD)

//TODO

//ajouter dans le main theme
// j'aime me battre
// le gras c'est la vie
// merci maxence
// faire le son du souffle

// swap color for player 2
// correction of powerUp
// finish main menu and end