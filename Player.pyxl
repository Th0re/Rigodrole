// Scripts, variables, and constants here are visible to all modes

let boingSounds = [
   boing_nico_1,
   boing_nico_2,
   boing_nico_3,
   boing_nico_4
]

let souffleSounds = [
   souffle_nico_1,
   souffle_nico_2,
   souffle_nico_3,
   souffle_nico_4,
   souffle_steph_1,
   souffle_steph_2,
   souffle_steph_3,
   souffle_steph_4
]

def make_player(controller, position, spritesheet, horizontalBounds, playerIndex):
   return make_entity({
      spritesheet: spritesheet,
      controller: controller,
      horizontalBounds: horizontalBounds,
      pos: position,
      scale: xy(1, 1),
      size: xy(16,16),
      acc: xy(0, 0),
      vel: xy(0, 0),
      density: 0.1,
      remaining_jumps: 5,
      friction: 50%,
      top: make_entity({
         relativePos: xy(0,0),
         size: xy(16, 4)
      }),
      bottom: make_entity({
         relativePos: xy(0,12),
         size: xy(16, 4)
      }),
      left: make_entity({
         relativePos: xy(0,4),
         size: xy(4, 8)
      }),
      right: make_entity({
         relativePos: xy(12,4),
         size: xy(4, 8)
      }),
      score: 0,
      inversionTimer: 0,
      noLoopingTimer: 0
  })

def update_player(player, platforms):
   if player.inversionTimer > 0:
      player.inversionTimer -= DT
   if player.noLoopingTimer > 0:
      player.noLoopingTimer -= DT
   player.spin = 0
   player.torque = 0
   if player.pos.x < player.horizontalBounds.x:
      if player.noLoopingTimer <= 0:
         entity_move(player, xy(player.horizontalBounds.y-1, player.pos.y))
      else:
         entity_move(player, xy(player.horizontalBounds.x, player.pos.y))

   if player.pos.x > player.horizontalBounds.y:
      if player.noLoopingTimer <= 0:
         entity_move(player, xy(player.horizontalBounds.x, player.pos.y))
      else:
         entity_move(player, xy(player.horizontalBounds.y-1, player.pos.y))

   let controller = player.controller
   if controller.x:
      if player.inversionTimer <= 0:                   
         player.vel.x = controller.x * HORIZONTAL_SPEED
      else:
         player.vel.x = - controller.x * HORIZONTAL_SPEED
   if controller.xx:
      playRandomSouffle()
   if controller.aa and player.remaining_jumps > 0:
      playRandomBoing()
      player.vel.y = -6.5
      --player.remaining_jumps
   
   for platform in platforms:
      if overlaps(platform, player, false):
         player.top.pos = player.pos + player.top.relativePos
         if overlaps(platform, player.top):
            player.vel.x /= 1.5
            if player.vel.y < 0:
               player.vel.y = 0
               player.acc.y = 0
         player.bottom.pos = player.pos + player.bottom.relativePos
         if overlaps(platform, player.bottom):
            player.vel.x /= 1.5
            if player.vel.y > 0:
               player.vel.y = 0
               player.acc.y = 0
               if (player.remaining_jumps < 2):
                  player.remaining_jumps = 2
         player.left.pos = player.pos + player.left.relativePos
         if overlaps(platform, player.left):
            if player.vel.x > 0:
               player.vel.x = 0
               player.acc.x = 0
         player.right.pos = player.pos + player.right.relativePos
         if overlaps(platform, player.right):
               if player.vel.x < 0:
                  player.vel.x = 0
                  player.acc.x = 0

   if player.vel.y > 3: player.vel.y = 3

def playRandomBoing():
   let randomIndex = random_integer(0, size(boingSounds) - 1)
   play_sound(boingSounds[randomIndex], false, 20)

def playRandomSouffle():
   let randomIndex = random_integer(0, size(souffleSounds) - 1)
   play_sound(souffleSounds[randomIndex], false, 20)
      
def draw_player(player):
   if player.controller.x != 0:
      player.sprite = player.spritesheet.moving[⌊mode_frames / 10⌋ mod 2]
      if player.controller.x > 0:
         player.scale.x = -1
      else:
         player.scale.x = 1
   else:
      player.sprite = player.spritesheet.idle[⌊mode_frames / 10⌋ mod 2]
   draw_entity(player)
   if (player.noLoopingTimer > 0):
      draw_line(xy(player.horizontalBounds.x, 0), xy(player.horizontalBounds.x, SCREEN_SIZE.y), rgb(1,0,0))
      draw_line(xy(player.horizontalBounds.y-1, 0), xy(player.horizontalBounds.y-1, SCREEN_SIZE.y), rgb(1,0,0))
   if (player.inversionTimer > 0):
      draw_text(superFont_15, format_number(player.inversionTimer, "0"), player.pos, rgb(1,1,1))