// Scripts, variables, and constants here are visible to all modes

let powerupWidth = 8
let powerupHeight = 8

const powerup_array = []

def createPowerUp():
   set_random_seed(local_time().millisecond)
   // random position between all platform column
   let randomPos = random_integer(0, 4)

   push(powerup_array, make_entity
      ({
         pos: xy(LEFT_SCREEN_START_X + (randomPos * PLATFORM_COLUMN_X) + powerupWidth/2 + 15, 20),
         shape: "rect",
         size: xy(powerupWidth, powerupHeight),
         sprite: powerup_sprite,
         pivot: xy(0, 0),
         acc: xy(0, 0),
         vel: xy(0, 1.5),
      }))

   let randomPowerUpPos = random_integer(0, 4)
   
   push(powerup_array, make_entity
      ({
         pos: xy(RIGHT_SCREEN_START_X + (randomPowerUpPos * PLATFORM_COLUMN_X) + powerupWidth/2 + 15, 20),
         shape: "rect",
         size: xy(powerupWidth, powerupHeight),
         sprite: powerup_sprite,
         pivot: xy(0, 0),
         acc: xy(0, 0),
         vel: xy(0, 1.5),
      }))

def powerUpCollideEntity(powerup, entitys):
   for entity in entitys:
      if overlaps(powerup, entity):
         return true
   return false

def updatePowerUp(players, platforms, dt):
   //move platform and check for out of bound
   for powerup in clone(powerup_array):
      if powerup.pos.y â‰¥ SCREEN_SIZE.y:
         remove_values(powerup_array, powerup)
         continue
 
      entity_move(powerup, powerup.pos + powerup.vel)

      if powerUpCollideEntity(powerup, platforms):
         powerup.vel.y = 1.0

      if powerUpCollideEntity(powerup, players):
         remove_values(powerup_array, powerup)

def powerUpDraw():
   for powerup in powerup_array:
      draw_entity(powerup)